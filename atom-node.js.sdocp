sdocp('atom-node.js.sdoc', 'ATOM -> JSON translator | Spencer Tipping\nCopyright (C) 2010 Social Media Networks, all rights reserved\n\n  caterwaul.clone(\'std\')(function (require) {\n\n  XML fetching.\n  We create an HTTP client to fetch the XML specified by the user. In this case it\'s the entire URL, so we just unescape it to get the URL they wanted.\n\n    const fetch_xml = fn[hostname, url, cc][let[request = require(\'http\').createClient(80, hostname).request(\'GET\', url, {host: hostname})] in\n                                            (request.end(), request.on(\'response\', let[data = []] in fn[response][response.setEncoding(\'utf8\'), response.on(\'data\', fn[s][data.push(s)]),\n                                                                                                                                                response.on(\'end\',  fn_[cc(data.join(\'\'))])]))];\n\n  XML -> JSON conversion.\n  Here\'s how this works. When we see a node, we create an object {attributes: node_attributes}. This then gets associated with the previous node and pushed onto the node stack (thus becoming\n  the active node). When we see text, we assign the \'text\' attribute of the current node to it. When we leave a node, we pop the node stack.\n\n  If we see a node called X and the current node already has an X, then we convert it to an array and push the new node onto that array. This means that multiple nodes are handled correctly:\n\n  | <foo>\n      <bar>stuff</bar>\n      <bar>stuff</bar>\n    </foo>\n\n  For this example, \'foo\' will look like this: {bar: [{text: stuff, attributes: {}}, {text: stuff, attributes: {}}]}. I would empty out the attributes if all they have is text, but that\'s more\n  difficult than I\'d like to think about right now.\n\n    const xml_to_json = fn[xml, cc][let[result = {}, stack = [], parser = require(\'./sax.js\').parser(true, {lowercasetags: true})] in\n                                    (parser.onopentag = fn[n][result[n.name] ? result[n.name].constructor === Array ?\n                                                                                 let[n = {attributes: n.attributes}, e = n.name] in (stack.push(result), result[e].push(result = n)) :\n                                                                                 let[n = {attributes: n.attributes}, e = n.name] in (stack.push(result), result[e] = [result[e], result = n]) :\n                                                                               (stack.push(result), result[n.name] = {attributes: n.attributes}, result = result[n.name])],\n                                     parser.onclosetag = fn[name][result = stack.pop()],\n                                     parser.ontext = fn[s][result.text = (result.text || \'\') + s],\n                                     parser.onend = fn_[cc(result)],\n                                     parser.write(xml).close())];\n\n  HTTP server.\n  This is simple. We accept requests of this form:\n\n  | http://this-server/www.server.com/foo/bar/bif.xml\n\n  The URL is unescaped to make sure that special characters get properly represented.\n\n    Request caching.\n    Because we don\'t want to hammer other servers, I keep a one-minute cache. The deal is simple: Each minute the cache gets emptied, but until then the server can store things.\n\n    const cache = {}, listeners = {};\n    setInterval(fn_[cache = {}, listeners = {}], 60000);\n    require(\'http\').createServer(fn[req, res][cache[req.url] ? (res.writeHead(200, {\'content-type\': \'text/json\'}), res.end(cache[req.url])) :\n                                                               ((listeners[req.url] ? listeners[req.url].push(res) :\n                                                                                      (listeners[req.url] = [res],\n                                                                                       fetch_xml(parts[1], require(\'querystring\').unescape(parts[2]),\n                                                                                         fn[xml][xml_to_json(xml, fn[json][listeners[req.url].forEach(fn[res]\n                                                                                                                            [res.writeHead(200, {\'content-type\': \'text/json\'}),\n                                                                                                                             res.end(cache[req.url] = JSON.stringify(json))])])])))),\n                                              when[parts], where[parts = /\\/?([^\\/]+)(.*)/.exec(req.url)]]).listen(8080, \'0.0.0.0\');\n  }) (require);\n');